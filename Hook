useEffect();

The Effect Hook lets you perform side effects in function components:

It’s a hook that lets do side effects inside function components.
It takes a function as a first argument, and an array of dependencies as the second:
useEffect(fn, [deps])

It is being called in the render, which looks like this:

side effect   function <Component />

# React is centered around functional programming.

side effect  = any execution that affects something outside the scope of the function being executed.

Global variables = variables that are accessible globally, or everywhere throughout the program.
Once declared, they remain in memory throughout the runtime of the program.

to create a global variable 
Create a file named "config.js" in ./src folder with this content:
module.exports = global.config = {
    i18n: {
        welcome: {
            en: "Welcome",
        }
    }
};

Some examples of side effects in React components are:

Making asynchronous API calls for data
Setting a subscription to an observable
Manually updating the DOM element
Updating global variables from inside a function

There are two common kinds of side effects in React components: those that don’t require cleanup, and those that do. Let’s look at this distinction in more detail.

Effects Without Cleanup

Sometimes, we want to run some additional code after React has updated the DOM.

What does useEffect do? 

By using this Hook, you tell React that your component needs to do something after render. 

React will remember the function you passed and call it later after performing the DOM updates


Why is useEffect called inside a component?

Does useEffect run after every render

Yes! By default, it runs both after the first render and after every update. 

Effects with Cleanup
------------------------------------
  

effects run after every completed render, but you can choose to fire them only when certain values have changed. 
This hook uses an array of "dependencies": variables or states that useEffect listen to for changes. 
When their values change, the main body of the useEffect hook is executed.

The return statement of this hook is used to clean methods that are already running, such as timers.

There is an interesting behaviour with this hook when we use non-primitive JavaScript data types as dependencies (e.g., arrays, objects, functions). 
With primitive values, such as numbers and strings, we can define a variable from another variable, and they will be the same:

const a = 1
const b = 1
a === b
// Output: true

But with non-primitive values, such as objects, this behaviour is not the same:
{} === {}
// Output: false

So we need to be very careful when using objects as dependencies, because even though they may look like unaltered data, they may not be so. 
Instead of using objects, we may want to use their properties as dependencies:


useEffect(() => {
        // Some code that uses the properties
    }, [myObject.property1, myObject.property2]);
    
    
useEffect use cases
Running once on mount: fetch API data
Running on state change: validating input field
Running on state change: live filtering
Running on state change: trigger animation on new array value
Running on props change: update paragraph list on fetched API data update
Running on props change: updating fetched API data to get BTC updated price






