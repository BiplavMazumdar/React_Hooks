useMemo

It will Returns a memoized value.

Think of memoization as caching a value so that it does not need to be recalculated.

The useMemo Hook only runs when one of its dependencies update.

The useMemo and useCallback Hooks are similar. The main difference is that useMemo returns a memoized value and useCallback returns a memoized function. 

The useMemo Hook can be used to keep expensive, resource intensive functions from needlessly running.

import React, { useMemo, useState } from 'react'

const Memo = () => {
    const[count,setCount] = useState(0);
    const[todos,setTodos] = useState([]);

    const expensiveCalculation = (num) => {
        console.log("Calculating...");
        for (let i = 0; i < 1000000000; i++) {
          num += 1;
        }
        return num;
      };

      //  const calculation = expensiveCalculation(count);

       const calculation = useMemo(()=>expensiveCalculation(count),[count]);

      const increment = ()=>{
        setCount((c)=>c+1);
      }

      const addTodo  =()=>{
        setTodos((t)=>[...t,"New"]);
      }

  return (
    <div>

<h2>My Todos</h2>

{todos.map((todo,index)=>{
    return(<>

    <p key={index}>{todo}</p>
    
    </>)
})}

<button onClick={addTodo}>Click now</button>
<hr />

<div>
    count : {count}
    <button onClick={increment}>Increment</button>
    <h1>Expensive Calculation</h1>
    {calculation}
</div>
        
    </div>
  )
}

export default Memo


alternative code ----------------------------------

import React, { useMemo, useState } from 'react'

const Prac = () => {

    const[count,setCount]  = useState(0);
    const[number,setNumber] = useState(0);


    function m2(){
        setNumber(number+1)
    }

   

    const excalculation = (num)=>{
        for(var i = 0;i<1000000000;i++){
            num+1
        }
        return num;
    }

    const cal =  useMemo(()=>excalculation(count),[count]);

    const m1 =()=>{
        setCount(count+1);
    }

  return (
    <div>
        <button onClick={m1}>click now</button>
        <h1>{count}</h1>


        <h2>{number}</h2>
        <button onClick={m2}>m2</button>
        
    </div>
  )
}

export default Prac

--------------------------------------------------------

Use useMemo

To fix this performance issue, we can use the useMemo Hook to memoize the expensiveCalculation function. This will cause the function to only run when needed.

We can wrap the expensive function call with useMemo.

The useMemoHook accepts a second parameter to declare dependencies. The expensive function will only run when its dependencies have changed.

In the following example, the expensive function will only run when count is changed and not when todo's are added.




To fix this performance issue, we can use the useMemo Hook to memoize the expensiveCalculation function. 
This will cause the function to only run when needed.

We can wrap the expensive function call with useMemo.

The useMemoHook accepts a second parameter to declare dependencies. The expensive function will only run when its dependencies have changed.
In the following example, the expensive function will only run when count is changed and not when todo's are added.





In computing, memoization or memoisation is an optimization technique used primarily to speed up computer programs by storing the results of expensive function 
calls and returning the cached result when the same inputs occur again.

Pass a “create” function and an array of dependencies.useMemo will only recompute the memoized value when one of the dependencies has changed. 
This optimization helps to avoid expensive calculations on every render.

Remember that the function passed to useMemo runs during rendering. Don’t do anything there that you wouldn’t normally do while rendering. 
For example, side effects belong in useEffect, not useMemo.

If no array is provided, a new value will be computed on every render.

You may rely on useMemo as a performance optimization, not as a semantic guarantee. 

