useCallback

The React useCallback Hook returns a memoized callback function.

Think of memoization as caching a value so that it does not need to be recalculated.

This allows us to isolate resource intensive functions so that they will not automatically run on every render.

The useCallback Hook only runs when one of its dependencies update.

This can improve performance.

The useCallback and useMemo Hooks are similar. The main difference is that useMemo returns a memoized value and useCallback returns a memoized function. 

One reason to use useCallback is to prevent a component from re-rendering unless its props have changed.

In this example, you might think that the Todos component will not re-render unless the todos change:

What is useCallback used for?

The useCallback hook is used  when you have a component in which the child is rerendering again and again without need.
Pass an inline callback and an array of dependencies. 
useCallback will return a memoized version of the callback that only changes if one of the dependencies has changed.
