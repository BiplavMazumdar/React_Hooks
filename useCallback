useCallback

The React useCallback Hook returns a memoized callback function.

Think of memoization as caching a value so that it does not need to be recalculated.

This allows us to isolate resource intensive functions so that they will not automatically run on every render.

The useCallback Hook only runs when one of its dependencies update.

This can improve performance.

The useCallback and useMemo Hooks are similar. The main difference is that useMemo returns a memoized value and useCallback returns a memoized function. 

One reason to use useCallback is to prevent a component from re-rendering unless its props have changed.

In this example, you might think that the Todos component will not re-render unless the todos change:

What is useCallback used for?

The useCallback hook is used  when you have a component in which the child is rerendering again and again without need.
Pass an inline callback and an array of dependencies. 
useCallback will return a memoized version of the callback that only changes if one of the dependencies has changed.

Without useCallback Hook:

The problem is that once the counter is updated, all three functions are recreated again. 
The alert increases by three at a time but if we update some states all the functions related to that states should only re-instantiated.

import React, { useEffect, useState } from "react";

const funcount = new Set();

const Callback2 = () => {
  const [count, setCount] = useState(0);
  const [number, setNumber] = useState(0);

  const incrementcount = () => {
    setCount(count + 1);
  };

  const decrementcount = () => {
    setCount(count - 1);
  };

  const incrementnumber = () => {
    setNumber(number + 1);
  };

  funcount.add(incrementcount);
  funcount.add(decrementcount);
  funcount.add(incrementnumber);

  useEffect(() => {
    alert(funcount.size);
  });

  return (
    <div>
      <h1>Count : {count}</h1>
      <button onClick={incrementcount}>increment Count</button>

      <button onClick={decrementcount}>Decrement Count</button>

      <button onClick={incrementnumber}>increment number</button>
    </div>
  );
};

output :- In this output all the count and number when click it will increse the count 3 times 

export default Callback2;

/////////////////////////////////////

With useCallback hook: 
To solve this problem we can use the useCallback hook. 

import React, { useCallback, useEffect, useState } from "react";

const funcount = new Set();

const Callback2 = () => {
  const [count, setCount] = useState(0);
  const [number, setNumber] = useState(0);

  const incrementcount = useCallback(() => {
    setCount(count + 1);
  }, [count]);

  const decrementcount = useCallback(() => {
    setCount(count - 1);
  }, [count]);

  const incrementnumber = useCallback(() => {
    setNumber(number + 1);
  }, [number]);

  funcount.add(incrementcount);
  funcount.add(decrementcount);
  funcount.add(incrementnumber);

  useEffect(() => {
    alert(funcount.size);
  });

  return (
    <div>
      <h1>Count : {count}</h1>
      <button onClick={incrementcount}>increment Count</button>

      <button onClick={decrementcount}>Decrement Count</button>

      <button onClick={incrementnumber}>increment number</button>
    </div>
  );
};

export default Callback2;

Output: As we can see from the below output when we change the state ‘count’ then two functions will re-instantiated so the set size will increase by 
2 and when we update the state ‘number’ then only one function will re-instantiated and the size of the set will increase by only one.



